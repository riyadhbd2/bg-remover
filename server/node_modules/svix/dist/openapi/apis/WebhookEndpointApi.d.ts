import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';
import { OperationalWebhookEndpointHeadersIn } from '../models/OperationalWebhookEndpointHeadersIn';
import { OperationalWebhookEndpointHeadersOut } from '../models/OperationalWebhookEndpointHeadersOut';
import { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';
import { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';
import { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';
import { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';
import { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';
import { Ordering } from '../models/Ordering';
export declare class WebhookEndpointApiRequestFactory extends BaseAPIRequestFactory {
    v1OperationalWebhookEndpointCreate(operationalWebhookEndpointIn: OperationalWebhookEndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointDelete(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointGet(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointGetHeaders(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointGetSecret(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointRotateSecret(endpointId: string, operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointUpdate(endpointId: string, operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate, _options?: Configuration): Promise<RequestContext>;
    v1OperationalWebhookEndpointUpdateHeaders(endpointId: string, operationalWebhookEndpointHeadersIn: OperationalWebhookEndpointHeadersIn, _options?: Configuration): Promise<RequestContext>;
}
export declare class WebhookEndpointApiResponseProcessor {
    v1OperationalWebhookEndpointCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
    v1OperationalWebhookEndpointDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1OperationalWebhookEndpointGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
    v1OperationalWebhookEndpointGetHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointHeadersOut>>;
    v1OperationalWebhookEndpointGetSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointSecretOut>>;
    v1OperationalWebhookEndpointListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseOperationalWebhookEndpointOut>>;
    v1OperationalWebhookEndpointRotateSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1OperationalWebhookEndpointUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
    v1OperationalWebhookEndpointUpdateHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
}
